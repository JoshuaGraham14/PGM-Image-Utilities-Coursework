// *************************
Student Name: Joshua Graham
StudentID: 201496708
Email: sc21jg@leeds.ac.uk
Date Commenced: 25/02/2022
// *************************


*NOTE* I am re-writing this modules.txt plan, as I originally misunderstood the task.

- Here are the modules which I intend to create:


*-- pgmEcho.c --*
This is the main module. It contains the main method which will use the other modules to carry
out the task of taking an input pgm file and copying it to an output pgm file. 
-> USED FOR: Task I.


*-- pgmErrors.c --*
This module will be used to validate the values from an input pgm file and print the error 
messages (if there are any present). It will check:
1) The magic number
2) The comment line string
3) The dimensions (width & height) are valid
4) The max grey value is valid
5) The image data
6) Errors with writing to the file
-> USED FOR: Task I, Task II, Task III, Task IV.


*-- pgmImage.c --*
This module will store a struct containing the data for a pgm file.
The struct will store the data captured from the reading the input pgm file, and then later
the values stored will be retrieved  
-> USED FOR: Task I, Task II, Task III, Task IV.


*-- pgmComp.c --*
Module which contains main method for comparing two pgm file to test whether they are logically
identical.
-> USED FOR: Task II.


*-- conversion.c --*
This module will contain the ,aommethods to convert a pgm in ASCII form to binary or vice versa.
-> USED FOR: Task III, IV.


*-- pgmReduce.c --*
Module which contains main method for comparing reducing an input pgm file by a factor of n.
-> USED FOR: Task IV.





//****************************************************************************************************//
Original work which describes a brief overview of each task:

Task I
- Module pgmEcho.c
Takes in as input a file of type .pgm and outputs it to a different file.
INPUTS: command-line parameters: inputImage, outputImage.
OUTPUTS: outputImage file contains a copy of the inputImage pgm file.


Task II
- Module pgmComp.c
Takes in two inputs as file of type .pgm and compares them to see if they are 'logically identical'.
INPUTS: command-line parameters: image1, image2.
OUTPUTS: return 0 (success) + print statement reading "IDENTICAL: The two files were identical" if
         the two images are identical OR print statement reading "DIFFERENT: The two files were
         not identical".


Task III
- Module pgma2b.c
Takes in ASCII form of pgm file and converts to binary
INPUTS: command-line parameters: ASCII formatted pgm file, fileLocation2.
OUTPUTS: return 0 (success) + print statement reading "CONVERTED: The file was converted".

- Module pgma2a.c
Takes in binary form of pgm file and converts to ASCII
INPUTS: command-line parameters: binary formatted pgm file, fileLocation2.
OUTPUTS: return 0 (success) + print statement reading "CONVERTED: The file was converted".


Task IV
- Module pgmReduce.c
Takes in an input file of type .pgm (either ASCII or binary) and firstly convert it to ASCII if it
is of type binary, using the pgma2a.c module. The input file is then reduced by a factor of 'intFactor'
in each dimension.
INPUTS: 3 command-line parameters:
        - inputFile - pgm file,
        - intFactor - integer factor n,
        - outputFile - pgm file.
OUTPUTS: outputImage file contains a copy of the inputImage pgm file.


Task V
- Module pgmTile.c
Takes in an input file of type .pgm (either ASCII or binary) and given reduction factor x, splits the image
into n * n smaller images, with corresponing positions to the original image.
INPUTS: 3 command-line parameters:
        - inputFile - pgm file,
        - intFactor - integer factor n,
        - outputFile - output file template name.
OUTPUTS: n * n smaller images, tiled according to rows and columns.


Task VI
- Module pgmAssemble.c
Assembles a large image from smaller ones. 
INPUTS: 3+3i command-line parameters:
        - outputFile - pgm file name,
        - width - of outputFile
        - height - of outputFile
Remainder: triplets of:
        - row - start row position
        - column - start column position
        - subimage to insert
OUTPUTS: the assembled image from the provided smaller images.